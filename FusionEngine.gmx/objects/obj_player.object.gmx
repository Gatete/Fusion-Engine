<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playermask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_playermask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platformer Example - Player Object

//Handle the current state of the player.
//0: Idle
//1: Walk
//2: Jump
//3: Climb
state = 0;

//Delays jumping state when falling off
delay = 0;

//Handles the player facing direction and scale
//1: Right
//-1: Left
facing = 1;
xscale = 1;
yscale = 1;

//Handles the player direction when stuck on a solid.
//1:    Right
//-1:   Left
direct = 1;

//Allows the player to jump or not jump.
jumping = 0;

//Allows the player to swim when he/she enters in contact with water
swimming = false;

//Whether the player is crouched down.
crouch = false;

//Whether the player is able to move or not move.
move = false;

//Whether the player is vulnerable or invulnerable to all existing hazards.
invulnerable = false;

//Disables completely all player's controls, use this variable in in-game events.
disablecontrol = false;

//This variable will check if the player is stuck on a wall and it will move it if so.
inwall = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make the player blink when hit

//If the player is still invulnerable to all hazards
if (invulnerable) {

    //Repeat the process
    alarm[1] = 1;
    
    //Change alpha
    image_alpha = !image_alpha;
}

//Otherwise, set up default alpha value
else
    image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Makes the player vulnerable to all hazards

invulnerable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set the appropiate sprite for the player object

//Do not animate
image_speed = 0;

//If the player is climbing
if (state == 3) {

    //Set the climbing frame...
    image_index = 3;
    
    //...and set the default mask if we didn't yet.
    if (mask_index != spr_playermask)
        mask_index = spr_playermask;
}

//Otherwise
else {

    //If the player is not crouched down
    if (crouch == false) {
    
        //If there's no vertical speed
        if (vspeed == 0)
            image_index = 0;
        
        //Otherwise
        else if (state == 2) {
        
            if (vspeed &lt; 0)
                image_index = 1;
            else
                image_index = 2;
        }
        
        //Set the default mask if we didn't yet
        if (mask_index != spr_playermask)
            mask_index = spr_playermask;
    }
    
    //Otherwise
    else {
    
        //Set the default frame...
        image_index = 4;
        
        //...and set the default mask if we didn't yet
        if (mask_index != spr_playermask_crouch)
            mask_index = spr_playermask_crouch;        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics

//Update previous state
stateprev = state;

//Check if the player is making contact with a slope
if (collision_rectangle(x-1,bbox_bottom+1,x+1,bbox_bottom+4,obj_slopeparent,1,0))
    slope = true;
else
    slope = false;

//Floor collision
if (vspeed &gt; 0) { //If the player is moving down.

    //Check for a semisolid object
    var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+vspeed,obj_semisolid,1,0);
    
    //If the semisolid exists and the player is above it.
    if (semisolid)
    &amp;&amp; (bbox_bottom &lt; semisolid.yprevious+5)
    &amp;&amp; (!collision_rectangle(bbox_left,bbox_top+4,bbox_right,semisolid.y-1,obj_solid,1,0)) {
    
        //Snap above the semisolid platform
        y = semisolid.y-16;
        
        //Stop vertical movement
        vspeed = 0;
        gravity = 0;
        
        //Reset values
        event_user(15);
    }
}

//Check for a slope
var inslope = collision_rectangle(x-1,bbox_bottom,x+1,bbox_bottom+4,obj_slopeparent,1,0)
    
//Embed the player into the slope if he is walking or sliding down a slope to ensure correct slope physics.
if (collision_rectangle(x-1,bbox_bottom,x+1,bbox_bottom+4,obj_slopeparent,1,0)) 
&amp;&amp; (!collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom-4,obj_slopeparent,1,0))
&amp;&amp; (state == 1) {

    if (inslope)
        y += inslope.desc;
}

//Handle slope collision
if (collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom,obj_slopeparent,1,0)) 
&amp;&amp; (!collision_rectangle(x-1,bbox_bottom-8,x+1,bbox_bottom-8,obj_slopeparent,1,0)) {
    
    //If the player is moving down
    if (vspeed &gt; 0) {
    
        //Stop vertical movement
        vspeed = 0;
        gravity = 0;
        
        //Reset values
        event_user(15);
    }
    
    //Prevent the player from getting embed inside a slope.
    if (vspeed &gt; -0.85)
        while (collision_rectangle(x-1,bbox_bottom-4,x+1,bbox_bottom,obj_slopeparent,1,0))
            y--;
}

//Left conveyor belt collision
lconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_l,1,0);
if ((lconv) &amp;&amp; (lconv.image_speed != 0)) {

    if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0))
        x--;
}

//Right conveyor belt collision
rconv = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_conveyor_r,1,0);
if ((rconv) &amp;&amp; (rconv.image_speed != 0)) {

    if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0))
        x++;
}

//If the player is not swimming
if (!swimming) {

    //If the player is not climbing
    if (state != 3) {

        //Perform main behaviour script
        event_user(2);
    }
    
    //Otherwise, if the player is climbing.
    else if (state == 3) {
    
        //Perform climb behaviour script
        event_user(3);
    }
}

//Otherwise, if the player is actually swimming.
else if (swimming) {
    
    //Perform swim behaviour script
    event_user(4);
}

//If the player is bumping into a wall to the right
if (hspeed &gt; 0) 
&amp;&amp; (collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-4-(slope*8),obj_solid,1,0)) {

    //Stop horizontal movement
    hspeed = 0;    
    
    //Prevent the player from getting embed into the wall
    while (collision_rectangle(x,bbox_top+4,bbox_right,bbox_bottom-4,obj_solid,1,0))
    &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,1,0))
        x--;
}

//Otherwise, if the player is bumping into a wall to the left
else if (hspeed &lt; 0)
&amp;&amp; (collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-4-(slope*8),obj_solid,1,0)) {

    //Stop horizontal movement
    hspeed = 0;    
    
    //Prevent the player from getting embed into the wall
    while (collision_rectangle(bbox_left,bbox_top+4,x,bbox_bottom-4,obj_solid,1,0))
    &amp;&amp; (!collision_point(x,bbox_top+4,obj_solid,1,0))
        x++;
}

//If the player is moving up
if (vspeed &lt; 0) {

    //Collision with a ceiling
    if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,0)) {
        
        //Stop vertical movement
        vspeed = 0;
        
        //If the player is not climbing
        if (state = 2)
        &amp;&amp; (state != 3)
            jumping = 2;
    }
}

//Prevent player from getting embed on a ceiling
if ((state &gt; 1) || (delay &gt; 0)) {
    
    while (collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top,obj_solid,1,0))
        y++;
}

//If the player is not climbing
if (state != 3) {

    //If the player's controls are not disabled and it's not jumping
    if (state != 2)
    &amp;&amp; (!disablecontrol) {
    
        //Make the player crouch down when the 'Down' key is held
        if (keyboard_check(vk_down))
        &amp;&amp; (!crouch)
            crouch = true;
            
        //Otherwise, if the 'Down' key is no longer pressed
        else if (!keyboard_check(vk_down))
        &amp;&amp; (crouch) {
        
            //Make the player get up
            crouch = false;
            
            //Check if there's a ceiling above the player and make him move until it's not embed in a solid
            if (collision_rectangle(bbox_left,bbox_top-16,bbox_right,bbox_top-16,obj_solid,1,0))
                inwall = true;
        }            
    }
}
else {

    //Make the player get up
    crouch = false;
}

//Check for a nearby swimming surface
var water = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_swim,1,0);

//If the player is not swimming and makes contact with a water surface
if ((!swimming) &amp;&amp; (water)) {
        
    //Make the player swim.
    swimming = true;
    
    //Make the player get up
    crouch = false;
    
    //Stop horizontal movement
    hspeed = 0;
    
    //Stop vertical movement
    gravity = 0;
    if (vspeed &gt; 0)
        vspeed = 0;
}

//Otherwise, if the player had enough swimming and wants to get out
else if ((swimming) &amp;&amp; (!water)) {

    //If there's not water above and there's not a solid on the way out
    if (!collision_rectangle(bbox_left,bbox_top-1,bbox_right,bbox_top-1,obj_solid,1,0)) {
    
        //If the player is moving up
        if ((state == 2) &amp;&amp; (vspeed &lt; 0)) {
        
            //If 'Shift' is held
            if (keyboard_check(vk_shift)) {
                
                //Make the player not swim
                swimming = false;
                
                //Allow variable jump
                jumping = 1;
                
                //Set the vertical speed
                vspeed = -2.75;
            }
            
            //Otherwise, if 'Shift' is not held.
            else {
            
                //If the player is moving up.
                if (vspeed &lt; 0)
                    vspeed = 0;
            }
        }
    }
}

//Free the player is he is stuck on a solid.
if (state &lt; 2) 
&amp;&amp; (!crouch) 
&amp;&amp; (!inwall) {

    //Check for a nearby solid block
    var stuck = collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_solid,1,1);
    
    //If the player is embed on a wall
    if (stuck) {
    
        //If the player is colliding with a left or right modifier
        if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_left,1,0))
        &amp;&amp; (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_right,1,0)) {
        
            //If the player is facing right
            if (xscale == 1) {
            
                //If the player's horizontal speed is equal/greater than 0
                if (hspeed &gt;= 0) {
            
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = -1;
                }
                
                //Otherwise, if the player's horizontal speed is lower than 0
                else if (hspeed &lt; 0) {
                
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = 1;                
                }
            }
            
            //Otherwise, if the player is facing left
            else if (xscale == -1) {
            
                //If the player's horizontal speed if equal/lower than 0.
                if (hspeed &lt;= 0) {
            
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = 1;
                }
                
                //Otherwise, if the player's horizontal speed if greater than 0
                else if (hspeed &gt; 0) {
                
                    //Move the player to safety
                    inwall = true;
                    
                    //Set the direction to move
                    direct = -1;                
                }           
            }
        }
        
        //Otherwise, if the player is overlapping an left modifier
        else if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_left,1,0)) {
        
            //Move the player to safety
            inwall = true;
            
            //Set the direction to move
            direct = -1;              
        }
        
        //Otherwise, if the player is overlapping an right modifier
        else if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_right,1,0)) {
        
            //Move the player to safety
            inwall = true;
            
            //Set the direction to move
            direct = 1;              
        }
    }
}

//Otherwise, if the player gets stuck on a wall
else if (inwall) {

    //Move the player until it's not embed in a wall
    x += 1*sign(direct);
    
    //If the player is not longer embed on a wall, make him able to move
    if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_solid,1,0))
        inwall = false;
}

//If the player is not in contact with water.
if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_swim,1,1)) {

    //If the player is swimming.
    if (swimming)  
        swimming = false;
}

//Prevent the player from going too high on the level
if (y &lt; -96)
    y = -96;
    
//Otherwise, if he is falling.
else {

    //If the player is below the bottom room boundary, restart the room.
    if (bbox_top &gt; room_height+32)
        room_restart();
}

//Set up scale
xscale = approach(xscale, 1, 0.05);
yscale = approach(yscale, 1, 0.05);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset all values, when landing

jumping = 0;

//Set scale
if (state == 2) {

    xscale = 0.5;
    yscale = 1.5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player's swimming behaviour script

//Maximum Horizontal Speed
var hspeedmax = 1;

//Jump Strength
var jumpstr = 3.4675;

//Acceleration
var acc = 0.025;
var accskid = 0.05;

//Deceleration
var dec = 0.007;

//Gravity
var grav = 0.03;

//Figure out the player's state.
if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_semisolid,1,0))
|| (collision_rectangle(x-1,bbox_bottom+1,x+1,bbox_bottom+1,obj_slopeparent,1,0))
&amp;&amp; (gravity == 0) {

    //Figure out if the player is standing or walking
    if (hspeed == 0)
        state = 0;
    else
        state = 1;

    //Reset state delay
    delay = 0;
}

//the player is jumping if there's no ground below him.
else {

    //Delay the change to the jump state
    if (delay &gt; 4)
        state = 2;
    else
        delay++;
}

//Make the player uncrouch if jumping.
if ((state == 2) &amp;&amp; (crouch))
    crouch = false;

//Prevent the player from swimming too fast.
if (vspeed &lt; -2) 
    vspeed = -2;
    
//Prevent the player from diving too fast.
if (vspeed &gt; 4)
    vspeed = 4;

//Set up the maximum horizontal speed.
if (state == 2)
    hspeedmax = 2;
else
    hspeedmax = 0.5;

//Handle the player movement.
if (!disablecontrol) &amp;&amp; (!inwall) { //If the player controls are not disabled.

    //If the player presses the 'Shift' key.
    if (keyboard_check_pressed(vk_shift)) {
    
        //Swim higher if the 'Up' key is pressed.
        if (keyboard_check(vk_up))
            vspeed -= 2;
        
        //Swim lower if the 'Down' key is pressed.
        else if (keyboard_check(vk_down))
            vspeed -= 0.5;
        
        //Otherwise
        else        
            vspeed -= 1.5;
            
        //Set the state
        state = 2;
            
        //Move the player a few pixels upwards when on contact with a moving platform or a slope.
        var platform = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_semisolid,1,0);
        if (platform)
        &amp;&amp; (platform.vspeed &lt; 0)
            y -= 4;
    }
    
    //Handle horizontal movement.
    //If the player presses the 'Right' key and the 'Left' key is not held.
    if ((keyboard_check(vk_right)) &amp;&amp; (!keyboard_check(vk_left)) &amp;&amp; (!crouch) ) {
        
        //Set the facing direction.
        facing = 1;
        
        //If there's NOT a wall on the way.
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)) {
        
            //Set the horizontal speed.
            if (hspeed &gt;= 0) //If the player horizontal speed is equal/greater than 0.        
                hspeed += acc;
            
            //Otherwise, If the player horizontal speed is lower than 0.
            else         
                hspeed += acc*2;
        }
    }
    
    //If the player presses the 'Left' key and the 'Right' key is not held.
    else if ((keyboard_check(vk_left)) &amp;&amp; (!keyboard_check(vk_right)) &amp;&amp; (!crouch)) {
        
        //Set the facing direction
        facing = -1;
        
        //If there's NOT a wall on the way.
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) {
        
            //Set the horizontal speed.
            if (hspeed &lt;= 0) //If the player horizontal speed is equal/lower than 0.        
                hspeed += -acc;
                
            //Otherwise, If the player horizontal speed is greater than 0. 
            else        
                hspeed += -acc*2;
        }      
    }
    
    //Otherwise, if neither of the 'Left' key or 'Right' key is not held.
    else if (vspeed == 0) { //If the player is on the ground.
    
        //Reduce the player speed until he stops.
        hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
        
        //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
        if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec))      
            hspeed = 0;     
    }
}

//Otherwise, If the player controls are disabled.
else if (disablecontrol) {

    //Reduce the player speed until he stops.
    hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
    
    //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
    if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec))    
        hspeed = 0;        
}

//Prevent the player from sliding too fast.
if (abs(hspeed) &gt; hspeedmax)
    hspeed = max(0,abs(hspeedmax)-0.05*2)*sign(hspeed);
    
//Apply gravity
if ((state == 2) || (delay &gt; 0))
    gravity = grav;      
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player's climbing behaviour script

//Jump Strength
var jumpstr = 3.4675;

//Cap horizontal speed
if (hspeed &gt; 1)
hspeed = 1;
if (hspeed &lt; -1)
hspeed = -1;

//Cap vertical speed
if (vspeed &gt; 1)
vspeed = 1;
if (vspeed &lt; -1)
vspeed = -1;

//Handle climbing
if (!disablecontrol) { //If the player controls are not disabled.

    //If the 'Right' key is held and the 'Left' key is not held.
    if (keyboard_check(vk_right)) &amp;&amp; (!keyboard_check(vk_left)) {
    
        //Set the horizontal speed.
        hspeed += 0.15;
        
        //Set the facing direction.
        facing = 1;
    }
    
    //Otherwise, if the 'Left' key is held and the 'Right' key not.
    else if (keyboard_check(vk_left)) &amp;&amp; (!keyboard_check(vk_right)) {
    
        //Set the horizontal speed.
        hspeed += -0.15;
        
        //Set the facing direction.
        facing = -1;
    }
    
    //Otherwise, if neither of the 'Left' or 'Right' keys are being held.
    else {
    
        hspeed = 0;
    }
    
    //If the 'Up' key is held and the 'Down' key is not held.
    if ((keyboard_check(vk_up)) &amp;&amp; (!keyboard_check(vk_down))) {
    
        //If there's not a climbable surface above the player.
        if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_climb,1,0)) {
        
            //Stop vertical speed
            vspeed = 0;
        }
        else { //Otherwise, allow him to climb.
        
            //Set the vertical speed.
            vspeed += -0.15;
        }
    }
    
    //If the 'Down' key is held and the 'Up' key not.
    else if ((keyboard_check(vk_down)) &amp;&amp; (!keyboard_check(vk_up))) {
    
        //Set the vertical speed.
        vspeed += 0.15;
        
        //Check for a nearby floor and stop climbing if there's one.
        var semisolid = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_semisolid,1,0);
        if (semisolid)
            state = 2;
    }
    
    //Otherwise, if neither of the 'Up' or 'Down' keys are being held.
    else            
        vspeed = 0;
    
    //Make the player able to jump.
    if (keyboard_check_pressed(vk_shift)) { //If the 'Shift' key is pressed and the player is not jumping.
        
        //Make the player able to vary the jump.
        jumping = 1;
        
        //Set the jumping state.
        state = 2;
        
        //Set the vertical speed.
        vspeed = -jumpstr+abs(hspeed)/7.5*-1;               
    }
}

//Check if there's a not climbable surface overlapping the player.
if (!collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_climb,1,0))        
    state = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///The player's main behaviour script

//Maximum horizontal speed
var hspeedmax = 1.35;

//Jump Strength
var jumpstr = 3.4675;

//Acceleration
var acc = 0.05;
var accskid = 0.15;

//Deceleration
var dec = 0.0375;
var decskid = 0.072;

//Gravity
var grav = 0.3625;
var grav_alt = 0.0625;

//Figure out the player's state.
if (collision_rectangle(bbox_left,bbox_bottom+1,bbox_right,bbox_bottom+1,obj_semisolid,1,0))
|| (collision_rectangle(x-1,bbox_bottom+1,x+1,bbox_bottom+1,obj_slopeparent,1,0))
&amp;&amp; (gravity == 0) {

    //Reset state delay
    delay = 0;
    
    //Figure out if the player is standing or walking
    if (hspeed == 0)
        state = 0;
    else
        state = 1;
}

//the player is jumping if there's no ground below him.
else {

    //Delay the change to the jump state
    if (delay &gt; 4)
        state = 2;
    else
        delay++;
}

//Prevent the player from falling too fast.
if (vspeed &gt; 4)
    vspeed = 4;
    
//Set up the player's maximum horizontal speed.
if (keyboard_check(vk_control)) //If the control key is being held.
    hspeedmax = 2.7;

//Otherwise, do not reduce speed until the player makes contact with the ground.  
else
    hspeedmax = 1.35;

//Handle basic movements
if ((!disablecontrol) &amp;&amp; (!inwall)) { //If the player's controls are not disabled.

    //Make the player able to jump when is on contact with the ground.
    if (keyboard_check_pressed(vk_shift))
    &amp;&amp; (jumping == 0)
    &amp;&amp; (vspeed == 0) 
    &amp;&amp; (state != 2) { //If the 'Shift' key is pressed and the player is not jumping.
                        
        //Set the vertical speed.
        vspeed = -jumpstr+abs(hspeed)/7.5*-1;
        
        //Make the player able to vary the jump.
        jumping = 1;
        
        //Switch to jump state
        state = 2;
        
        //Move the player a few pixels upwards when on contact with a moving platform or a slope.
        var platform = collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom+1,obj_semisolid,1,0);
        if (platform) 
        &amp;&amp; (platform.vspeed &lt; 0)
            y -= 4;
    }
    
    //Make the player fall if the player releases the 'Shift' key.
    else if ((jumping == 1) &amp;&amp; (keyboard_check_released(vk_shift)))         
        jumping = 2;
    
    //Enable/Disable controls
    if (crouch) { //If the player is crouched down.
    
        if (state == 2) { //If the player is jumping.
        
            //Allow the player's horizontal movement.
            move = true;
        }
        else { //Otherwise, disallow the player's movement.
        
            //Disallow the player's horizontal movement.
            move = false;    
        }
    }
    
    //Otherwise, if the player is not crouched down.
    else
    move = true;
    
    //Handle Horizontal Movement.
    if ((keyboard_check(vk_right)) &amp;&amp; (!keyboard_check(vk_left)) &amp;&amp; (move)) { //If the player holds the 'Right' key and the 'Left' key is not being held.
        
        //Set the facing direction.
        facing = 1;
        
        //If there's NOT a wall on the way.
        if (!collision_rectangle(bbox_right,bbox_top+4,bbox_right+1,bbox_bottom-1,obj_solid,1,0)) {
        
            //Check up the player's horizontal speed
            if (hspeed &lt; hspeedmax) {
                            
                //Make the player move horizontally.
                if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,1,0)) { //If the player is overlapping a slippery surface.
                    
                    //If the player's horizontal speed is equal/greater than 0.
                    if (hspeed &gt;= 0) {
                    
                        //Add 'acc' to hspeed.
                        hspeed += acc;
                    }
                    else { //Otherwise, if the player's speed is lower than 0.
                    
                        //Add 'accskid' to hspeed;
                        hspeed += accskid;
                    }
                }
                else { //Otherwise, if the player is overlapping a slippery surface.
                
                    //If the player's horizontal speed is equal/greater than 0.
                    if (hspeed &gt;= 0) {
                    
                        //Add 'acc' to hspeed
                        hspeed += acc/2;
                    }
                    else { //Otherwise, if the player's speed is lower than 0.
                    
                        //Add 'accskid' to hspeed.
                        hspeed += accskid/2;
                    }                                              
                }
            }
        }
    }
    
    //Otherwise, if the player holds the 'Left' key and the 'Right' key is not being held.
    else if ((keyboard_check(vk_left)) &amp;&amp; (!keyboard_check(vk_right)) &amp;&amp; (move)) {
        
        //Set the facing direction.
        facing = -1;
        
        //If there's NOT a wall on the way.
        if (!collision_rectangle(bbox_left-1,bbox_top+4,bbox_left,bbox_bottom-1,obj_solid,1,0)) {
        
            //Check up the player's horizontal speed.
            if (hspeed &gt; -hspeedmax) {
                    
                //Make the player move horizontally.
                if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,1,0)) { //If the player is overlapping a slippery surface.
                    
                    //If the player's horizontal speed is equal/lower than 0.
                    if (hspeed &lt;= 0) {
                        
                        //Add 'acc' to hspeed.
                        hspeed += -acc;
                    }
                    else { //Otherwise, if the player's speed is greater than 0.
                    
                        //Add 'accskid' to hspeed;
                        hspeed += -accskid;
                    }
                }
                else { //Otherwise, if the player is overlapping a slippery surface.
                
                    //If the player's horizontal speed is equal/lower than 0.
                    if (hspeed &lt;= 0) {
                    
                        //Add 'acc' to hspeed
                        hspeed += -acc/2;
                    }
                    else { //Otherwise, if the player's speed is greater than 0.
                    
                        //Add 'accskid' to hspeed.
                        hspeed += -accskid/2;
                    }                                              
                }
            }
        }
    }
    
    //Otherwise if the player is on contact with the ground, slowdown him until he stops.
    else if (vspeed == 0) { 
    
        //If the player is not overlapping a slippery surface.
        if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,1,0)) {
        
            //If the player is not crouched down.
            if (!crouch) {
            
                //Reduce the player's speed until he stops.
                hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
                
                //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
                if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec))             
                    hspeed = 0;
            }
            else { //If the player is crouched down.
            
                //Reduce the player's speed until he stops.
                hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
                
                //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
                if ((hspeed &lt; decskid) &amp;&amp; (hspeed &gt; -decskid))                
                    hspeed = 0;
            }
        }
        else { //Otherwise, if the player is overlapping a slippery surface.
        
            //Reduce the player's speed until he stops.
            hspeed = max(0,abs(hspeed)-dec/8)*sign(hspeed);
            
            //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
            if ((hspeed &lt; dec/8) &amp;&amp; (hspeed &gt; -dec/8))          
                hspeed = 0;
        }
    }
    
    //Slowdown the player is he is faster than his maximum speed.
    if ((state != 2) &amp;&amp; (abs(hspeed) &gt; hspeedmax)) {

        //Slow down Mario's horizontal speed
        hspeed = max(0,abs(hspeed)-0.025)*sign(hspeed);

        //If Mario is slow enough, stop his horizontal speed entirely
        if abs(hspeed) &lt; 0.025
            hspeed = 0
    }
}

//Otherwise, if the player's controls are disabled and the player is on contact with the ground.
else if (vspeed == 0) { 
        
    //If the player is not overlapping a slippery surface.
    if (!collision_rectangle(bbox_left,bbox_bottom,bbox_right,bbox_bottom,obj_slippery,1,0)) {
    
        //If the player is not crouched down.
        if (!crouch) {
        
            //Reduce the player's speed until he stops.
            hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
            
            //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
            if ((hspeed &lt; dec) &amp;&amp; (hspeed &gt; -dec))         
                hspeed = 0;
        }
        else { //If the player is crouched down.
        
            //Reduce the player's speed until he stops.
            hspeed = max(0,abs(hspeed)-dec)*sign(hspeed);
            
            //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
            if ((hspeed &lt; decskid) &amp;&amp; (hspeed &gt; -decskid))        
                hspeed = 0;
        }
    }
    else { //Otherwise, if the player is overlapping a slippery surface.
    
        //Reduce the player's speed until he stops.
        hspeed = max(0,abs(hspeed)-dec/8)*sign(hspeed);
        
        //Set up horizontal speed to 0 when hspeed hits the value given on 'dec'.
        if ((hspeed &lt; dec/8) &amp;&amp; (hspeed &gt; -dec/8))   
            hspeed = 0;
    }
}

//If the player is jumping
if ((state == 2) || (delay &gt; 0)) {
    
    //Variable jumping
    if (vspeed &lt; -2) &amp;&amp; (jumping == 1)
        gravity = grav_alt;
    
    //Otherwise, use alternate gravity.     
    else {
    
        //Use default gravity
        gravity = grav;
        
        //End variable jumping if it never ends manually.
        if (jumping = 1)
            jumping = 2;
    }
}

//Makes the player start climbing.
//Climb if overlapping a climbing surface.
if (collision_rectangle(bbox_left,bbox_top,bbox_right,bbox_top,obj_climb,1,0))
&amp;&amp; (!disablecontrol)
&amp;&amp; (keyboard_check(vk_up)) {

    //Change to climbing state
    state = 3;
    
    //Stop movement
    gravity = 0;
    speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add camera

instance_create(0,0,obj_camera);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player

draw_sprite_ext(spr_player, -1, round(x), round(y)+17, facing * xscale, yscale, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
