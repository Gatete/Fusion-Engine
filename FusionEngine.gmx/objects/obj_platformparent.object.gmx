<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_square</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>obj_solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Solid platform logic

//If the player is on this platform
if (collision_rectangle(bbox_left,bbox_top-5,bbox_right,bbox_top+4,obj_player,0,0))
&amp;&amp; (obj_player.vspeed &gt;= 0)
&amp;&amp; (obj_player.state &lt; 2)
&amp;&amp; (obj_player.y &lt; bbox_top-11) {

    //Check for a moving platform or quicksand
    var check = collision_rectangle(obj_player.bbox_left,obj_player.bbox_bottom-1,obj_player.bbox_right,obj_player.bbox_bottom,obj_semisolid,0,1);
    if (check)
        exit;

    //Snap the player vertically
    obj_player.y = ceil(bbox_top-15);

    //Snap the player horizontally and prevent it from getting embed on a solid.
    obj_player.x += x-xprevious;
    if (collision_rectangle(obj_player.bbox_right,obj_player.bbox_top+4,obj_player.bbox_right+1,obj_player.bbox_bottom-1,obj_solid,0,0))
        with (obj_player) x--;
    else if (collision_rectangle(obj_player.bbox_left-1,obj_player.bbox_top+4,obj_player.bbox_left,obj_player.bbox_bottom-1,obj_solid,0,0))
        with (obj_player) x++;   
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Push the player

//If the object is moving to the left
if (hspeed &lt; 0) {

    player = collision_rectangle(bbox_left-1-hspeed,bbox_top+1,bbox_left-1,bbox_bottom,obj_player,0,0);
    if (player)
        player.x--;
}

//Otherwise, if the object is moving to the right.
else if (hspeed &gt; 0) {

    player = collision_rectangle(bbox_right+1,bbox_top+1,bbox_right+1+hspeed,bbox_bottom,obj_player,0,0);
    if (player)
        player.x++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
